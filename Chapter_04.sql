---------------------------------------------------------------------------
-- Practical SQL: A Beginner's Guide to Storytelling with Data, 2nd Edition
-- by Anthony DeBarros

-- Chapter 4 Code Examples
----------------------------------------------------------------------------
 
create schema IF NOT EXISTS data_types_examples;

CREATE TABLE if not exists data_types_examples.eagle_watch (
    observation_date date
    , eagles_seen integer
    , notes text
);

-- Listing 4-1: Character data types in action
CREATE TABLE if not exists data_types_examples.char_data_types (
    char_column char(10),
    varchar_column varchar(10),
    text_column text
);

INSERT INTO data_types_examples.char_data_types
VALUES
    ('abc', 'abc', 'abc'),
    ('defghi', 'defghi', 'defghi');
   

select 
	'+' || char_column || '+' as "char"
	, '+' || varchar_column || '+' as "varchar"
	, '+' || text_column || '+' as "text"
from data_types_examples.char_data_types;



-- Listing 4-2: Number data types in action
CREATE TABLE if not exists data_types_examples.number_data_types (
    numeric_column numeric(20,5),
    real_column real,
    double_column double precision
);

INSERT INTO data_types_examples.number_data_types
VALUES
    (.7, .7, .7),
    (2.13579,      2.13579,      2.13579),
    (2.1357987654, 2.1357987654, 2.1357987654);

SELECT *
FROM data_types_examples.number_data_types;

-- Listing 4-3: Rounding issues with float columns
-- Assumes table created and loaded with Listing 4-2
SELECT
    numeric_column * 10000000 AS fixed,
    real_column * 10000000 AS floating
FROM data_types_examples.number_data_types
WHERE numeric_column = .7;

-- Listing 4-4: The timestamp and interval types in action
CREATE TABLE if not exists data_types_examples.date_time_types (
    timestamp_column timestamp with time zone,
    interval_column interval
);

INSERT INTO data_types_examples.date_time_types
VALUES
    ('2022-12-31 01:00 EST', '2 days'),
    ('2022-12-31 01:00 -8', '1 month'),
    ('2022-12-31 01:00 Australia/Melbourne', '1 century'),
    (now(),'1 week');

SELECT *
FROM data_types_examples.date_time_types;

-- drop table data_types_examples.date_time_types;
-- commit;

-- Listing 4-5: Using the interval data type
-- Assumes script 4-4 has been run
SELECT
    timestamp_column,
    interval_column,
    timestamp_column - interval_column AS new_date
FROM data_types_examples.date_time_types;

-- Listing 4-6: Three CAST() examples
SELECT timestamp_column, CAST(timestamp_column AS varchar(10))
FROM data_types_examples.date_time_types;

SELECT numeric_column,
       CAST(numeric_column AS integer),
       CAST(numeric_column AS text)
FROM data_types_examples.number_data_types;

-- Does not work:
SELECT CAST(char_column AS integer)
FROM data_types_examples.char_data_types;

-- Alternate notation for CAST is the double-colon:
SELECT timestamp_column::varchar(10)
FROM data_types_examples.date_time_types;


-- JSON
CREATE TABLE if not exists data_types_examples.orders (
	id integer generated by default as identity primary key,
	info json NOT NULL
);

INSERT INTO data_types_examples.orders (info)
VALUES('{ "customer": "Lily Bush", "items": {"product": "Diaper","qty": 24}}'),
      ('{ "customer": "Josh William", "items": {"product": "Toy Car","qty": 1}}'),
      ('{ "customer": "Mary Clark", "items": {"product": "Toy Train","qty": 2}}');

select *
from data_types_examples.orders;

SELECT info -> 'customer' AS customer
FROM data_types_examples.orders;

SELECT info -> 'items' AS items
FROM data_types_examples.orders;

SELECT info -> 'customer' AS customer, info -> 'items' -> 'qty' AS qty
FROM data_types_examples.orders;
