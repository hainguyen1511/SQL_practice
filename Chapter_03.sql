---------------------------------------------------------------------------
-- Practical SQL: A Beginner's Guide to Storytelling with Data, 2nd Edition
-- by Anthony DeBarros

-- Chapter 3 Code Examples
----------------------------------------------------------------------------

CrEaTe ScHeMa IF NOT EXISTS teachers;

-- drop table if exists teachers.teachers;
-- Listing 2-2: Creating a table named teachers with six columns
CREATE TABLE if not exists teachers.teachers (
    id int generated by default as identity primary key
    , first_name varchar(25)
    , last_name varchar(50)
    , school varchar(50)
    , hire_date date
    , salary numeric
);

-- truncate table teachers.teachers;
INSERT INTO teachers.teachers (
    first_name, last_name, school, hire_date, salary)
VALUES
    ('Janet', 'Smith', 'F.D. Roosevelt HS', '2011-10-30', 36200)
    , ('Lee', 'Reynolds', 'F.D. Roosevelt HS', '1993-05-22', 65000)
    , ('Samuel', 'Cole', 'Myers Middle School', '2005-08-01', 43500)
    , ('Samantha', 'Bush', 'Myers Middle School', '2011-10-30', 36200)
    , ('Betty', 'Diaz', 'Myers Middle School', '2005-08-30', 43500)
    , ('Kathleen', 'Roush', 'F.D. Roosevelt HS', '2010-10-22', 38500)
    , ('Lester', 'Sapp', 'T.D. Roosevelt HS', default, 78500)
;

-- Listing 3-1: Querying all rows and columns from the teachers table
SELECT *
FROM teachers.teachers;

-- drop table if exists teachers.teachers_nk;
-- creating the same table structure, but a natural key instead of a surrogate key
CREATE TABLE if not exists teachers.teachers_nk (
    first_name varchar(25)
    , last_name varchar(50)
    , school varchar(50)
    , hire_date date
    , salary numeric
);

INSERT INTO teachers.teachers_nk (
    first_name, last_name, school, hire_date, salary)
VALUES
    ('Janet', 'Smith', 'F.D. Roosevelt HS', '2011-10-30', 36200)
    , ('Lee', 'Reynolds', 'F.D. Roosevelt HS', '1993-05-22', 65000)
    , ('Samuel', 'Cole', 'Myers Middle School', '2005-08-01', 43500)
    , ('Samantha', 'Bush', 'Myers Middle School', '2011-10-30', 36200)
    , ('Betty', 'Diaz', 'Myers Middle School', '2005-08-30', 43500)
    , ('Kathleen', 'Roush', 'F.D. Roosevelt HS', '2010-10-22', 38500)
;

-- Note that this standard SQL shorthand also works:
-- I don't like this non-ANSI syntax.  Jesse
TABLE teachers.teachers;

TABLE teachers.teachers_nk;

-- Listing 3-2: Querying a subset of columns
SELECT last_name, first_name, salary
FROM teachers.teachers;

-- Listing 3-3: Sorting a column with ORDER BY
SELECT first_name, last_name, salary
FROM teachers.teachers
ORDER BY salary DESC;

-- Note you can also specify the sort column by
-- using a number representing its position in the result.
-- This is fine for throwaway queries, but i strongly discourage it for
-- queries you plan to keep for a long time.
SELECT first_name, last_name, salary
FROM teachers.teachers
ORDER BY 3 DESC;

-- Listing 3-4: Sorting multiple columns with ORDER BY
SELECT last_name, school, hire_date
FROM teachers.teachers
ORDER BY school ASC, hire_date DESC;

-- Listing 3-5: Querying distinct values in the school column
SELECT DISTINCT school
FROM teachers.teachers
ORDER BY school;

-- Listing 3-6: Querying distinct pairs of values in the school and salary columns
SELECT DISTINCT school, salary
FROM teachers.teachers
ORDER BY school, salary;

-- Listing 3-7: Filtering rows using WHERE

SELECT last_name, school, hire_date
FROM teachers.teachers
WHERE school = 'Myers Middle School';

-- SELECT last_name, school, hire_date
-- FROM teachers.teachers
-- WHERE school = "Myers Middle School";

-- Examples of WHERE comparison operators

-- Teachers with first name of Janet
SELECT first_name, last_name, school
FROM teachers.teachers
WHERE first_name = 'Janet';

-- School names not equal to F.D. Roosevelt HS
SELECT school
FROM teachers.teachers
WHERE school <> 'F.D. Roosevelt HS';

-- Teachers hired before Jan. 1, 2000
SELECT first_name, last_name, hire_date
FROM teachers.teachers
WHERE hire_date < '2000-01-01';

-- Teachers earning 43,500 or more
SELECT first_name, last_name, salary
FROM teachers.teachers
WHERE salary >= 43500;

-- Teachers who earn from $40,000 to $65,000
SELECT first_name, last_name, school, salary
FROM teachers.teachers
WHERE salary BETWEEN 40000 AND 65000;

SELECT first_name, last_name, school, salary
FROM teachers.teachers
WHERE salary >= 40000 AND salary <= 65000;

-- Listing 3-8: Filtering with LIKE AND ILIKE
SELECT first_name
FROM teachers.teachers
WHERE first_name LIKE 'sam%';

SELECT first_name
FROM teachers.teachers
WHERE first_name ILIKE 'sam%';

-- Listing 3-9: Combining operators using AND and OR
SELECT *
FROM teachers.teachers
WHERE school = 'Myers Middle School'
      AND salary < 40000;

SELECT *
FROM teachers.teachers
WHERE last_name = 'Cole'
      OR last_name = 'Bush';

SELECT *
FROM teachers.teachers
WHERE school = 'F.D. Roosevelt HS'
      AND (salary < 38000 OR salary > 40000);

-- Note how the results change if we omit parentheses. That's
-- because the AND operator takes precedence over OR and is
-- evaluated first:
SELECT *
FROM teachers.teachers
WHERE school = 'F.D. Roosevelt HS'
      AND (salary < 38000 OR salary > 40000);

-- Listing 3-10: A SELECT statement including WHERE and ORDER BY
SELECT first_name, last_name, school, hire_date, salary
FROM teachers.teachers
WHERE school LIKE '%Roos%'
ORDER BY hire_date DESC;


--

SELECT last_name, school, hire_date
FROM teachers.teachers
LIMIT 2;

SELECT last_name, school, hire_date
FROM teachers.teachers
OFFSET 2;

SELECT last_name, school, hire_date
FROM teachers.teachers
LIMIT 2
OFFSET 1;

SELECT 
	first_name || last_name as "Teacher Name"
	, salary as "Old Salary"
	, salary + 1000 as "New Salary"
FROM teachers.teachers
LIMIT 2;


select *
from teachers.teachers
where hire_date is null;


select *
from teachers.teachers
where hire_date is not null;
